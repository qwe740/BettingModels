#Cell 1
import requests
import pandas as pd
import sqlite3
import numpy as np

#Cell 2
#API Setup
BASE_URL = 'https://api.collegefootballdata.com/'
API_KEY = 'Y2P4Ex6vaj/fPBURQsf2jz+0R2pXikYv8PtvqoqiMG7ukTvpVscCVjUA10VDv+My'

def get_data(endpoint,params={}):
    headers = {"Authorization": f"Bearer {API_KEY}"}
    response = requests.get(f"{BASE_URL}/{endpoint}", headers=headers, params=params)
    return response.json()

#Cell 3
# Initial Data Pull (Games)
games_data = []
for year in range(2013, 2025):
    data = get_data("games", {"year": year, "division": "fbs"})
    games_data.extend(data)
games_df = pd.DataFrame(games_data)
games_df = games_df.drop(['home_line_scores','away_line_scores'], axis=1)
games_df.head()  # Quick check

#Cell 4
#SQLite Setup
conn = sqlite3.connect("cfb_data.db")
games_df.to_sql("games", conn, if_exists="replace", index=False)

#Cell 5
#Pull Lines Data
lines_data = []
for year in range(2013, 2025):
    print(f"Pulling lines for {year}...")
    data = get_data("lines", {"year": year, "division": "fbs"})
    lines_data.extend(data)

# Flatten the nested structure
flat_lines = []
for game in lines_data:
    game_id = game['id']
    home_team = game['homeTeam']
    away_team = game['awayTeam']
    if game['lines']:  # Check if lines exist
        for line in game['lines']:
            flat_lines.append({
                'game_id': game_id,
                'home_team': home_team,
                'away_team': away_team,
                'sportsbook': line['provider'],
                'spread_open': line.get('spreadOpen', None),
                'spread': line.get('spread', None)  # Closing spread
            })

lines_df = pd.DataFrame(flat_lines)
print(lines_df.shape)
lines_df.head()  # Check it out

#Cell 6
#Save to SQLite
conn = sqlite3.connect("cfb_data.db")
lines_df.to_sql("lines", conn, if_exists="replace", index=False)
conn.close()

#Cell 7
# Average Spreads and Update Games Table
conn = sqlite3.connect("cfb_data.db")

# Query to average closing spreads
query = """
SELECT 
    g.*, 
    AVG(l.spread) AS avg_closing_spread
FROM 
    games g
LEFT JOIN 
    lines l ON g.id = l.game_id
GROUP BY 
    g.id, g.season, g.week, g.start_date, g.home_team, g.home_points, 
    g.away_team, g.away_points
"""

# Load into DataFrame
merged_df = pd.read_sql_query(query, conn)

# Overwrite games table with new data (no spread_open)
merged_df.to_sql("games", conn, if_exists="replace", index=False)

# Verify
print(merged_df.shape)
merged_df.head()

conn.close()

#Cell 8
# Cell 9: Pull Advanced Stats
advanced_stats_data = []
for year in range(2013, 2025):
    print(f"Pulling advanced stats for {year}...")
    data = get_data("stats/game/advanced", {"year": year, "excludeGarbageTime":"true", "division": "fbs"})
    advanced_stats_data.extend(data)

# Create DataFrame
advanced_stats_df = pd.DataFrame(advanced_stats_data)
print(advanced_stats_df.shape)
advanced_stats_df.head()  # Check the data